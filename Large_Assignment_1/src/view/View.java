/* Authors: Nathan Crossan, Andy Zhang
 * Course: CSC 335
 * Description: the view of the music library
<<<<<<< HEAD
=======
 * NOTE: ALL methods were generated using AI, then edited
 * to reduce the number of unwanted outputs.
>>>>>>> refs/remotes/origin/main
 */
package view;
import java.io.FileNotFoundException;
import java.util.Scanner;

import model.LibraryModel;
import model.UserAccountManager;

public class View {	
	/* Prompt the user for input using a makeshift menu, using a switch statement
	 * to bridge to each function, it keeps doing this until the user types 8
	 * to exit the program.
	 */
	public static void promptUser() throws FileNotFoundException {
		// prompt the user for login/account creation
		String user = "";
		try {
			user = UserAccountManager.menu();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		LibraryModel library = new LibraryModel();
		UserAccountManager.loadUserData(user, library);
		Scanner scanner = new Scanner(System.in);
		// program main loop
        while (true) {
        	// print main menu options
            System.out.println("\n===== Music Library System =====");
            System.out.println("1. Search in Music Store");
            System.out.println("2. Search in User Library");
            System.out.println("3. Add to Library");
            System.out.println("4. Remove from Library");
            System.out.println("5. Get Lists from Library");
            System.out.println("6. Manage Playlists");
            System.out.println("7. Mark a Song as Favorite");
            System.out.println("8. Rate a Song");
            System.out.println("9. Exit Program");
            System.out.print("Enter your choice with a number: ");
            
            String choice = scanner.nextLine();
            
            // enter specific menus based on user input
            switch (choice) {
            case "1":
                searchMusicStore(library, scanner);
                break;

            case "2":
                searchUserLibrary(library, scanner);
                break;

            case "3":
                addToLibrary(library, scanner);
                break;
                
            case "4":
                removeFromLibrary(library, scanner);
                break;

            case "5":
                getListsFromLibrary(library, scanner);
                break;

            case "6":
                managePlaylists(library, scanner);
                break;

            case "7":
                markFavorite(library, scanner);
                break;

            case "8":
                rateSong(library, scanner);
                break;

            case "9":
            	UserAccountManager.saveUserData(user, library);
                System.out.println("Exiting...");
                scanner.close();
                return;
            
            default:
                System.out.println("Invalid choice. Please try again.");
            }
        }
		
	}

    /* Search in Music Store, output results are generated by the methods in the
     * LibraryModel class.
     */
    // Search in Music Store
    private static void searchMusicStore(LibraryModel library, Scanner scanner) {
        System.out.println("\n===== Search Music Store =====");
        System.out.println("1. Search for a song by title");
        System.out.println("2. Search for a song by artist");
        System.out.println("3. Search for an album by title");
        System.out.println("4. Search for an album by artist");
        System.out.println("5. Back");

        System.out.print("Enter your choice with a number: ");

        String choice = scanner.nextLine();
        switch (choice) {
            case "1":
                System.out.print("Enter song title: ");
                String songTitle = scanner.nextLine();
                System.out.println(library.searchStoreSongByTitle(songTitle));
                break;

            case "2":
                System.out.print("Enter artist: ");
                String artist = scanner.nextLine();
                System.out.println(library.searchStoreSongByArtist(artist));
                break;

            case "3":
                System.out.print("Enter album title: ");
                String albumTitle = scanner.nextLine();
                System.out.println(library.searchStoreAlbumByTitle(albumTitle));
                break;

            case "4":
                System.out.print("Enter artist: ");
                String albumArtist = scanner.nextLine();
                System.out.println(library.searchStoreAlbumByArtist(albumArtist));
                break;
            case "5":
            	break;
            default:
                System.out.println("Invalid choice.");
        }
    }
    
    // Search in User Library
    private static void searchUserLibrary(LibraryModel library, Scanner scanner) {
        System.out.println("\n===== Search User Library =====");
        System.out.println("1. Search for a song by title");
        System.out.println("2. Search for a song by artist");
        System.out.println("3. Search for songs by genre");
        System.out.println("4. Search for an album by title");
        System.out.println("5. Search for an album by artist");
        System.out.println("6. Search for a playlist by name");
        System.out.println("7. Back");

        System.out.print("Enter your choice with a number: ");

        String choice = scanner.nextLine();

        switch (choice) {
            case "1":
                System.out.print("Enter song title: ");
                String songTitle = scanner.nextLine();
                String output1 = library.searchSongByTitle(songTitle);
                System.out.println(output1);
                if (output1.contains("not found")) break;
                getAlbumInformation(library, scanner, "song", songTitle);
                break;

            case "2":
                System.out.print("Enter artist: ");
                String artist = scanner.nextLine();
                String output2 = library.searchSongByArtist(artist);
                System.out.println(output2);
                if (output2.contains("not found")) break;
                getAlbumInformation(library, scanner, "artist", artist);
                break;

            case "3":
                System.out.print("Enter genre: ");
                String genre = scanner.nextLine();
                System.out.println(library.searchSongByGenre(genre));
                break;
                
            case "4":
                System.out.print("Enter album title: ");
                String albumTitle = scanner.nextLine();
                System.out.println(library.searchAlbumByTitle(albumTitle));
                break;

            case "5":
                System.out.print("Enter artist: ");
                String albumArtist = scanner.nextLine();
                System.out.println(library.searchAlbumByArtist(albumArtist));
                break;

            case "6":
                System.out.print("Enter playlist name: ");
                String playlistName = scanner.nextLine();
                System.out.println(library.searchPlayListByName(playlistName));
                break;
            case "7":
            	break;

            default:
                System.out.println("Invalid choice.");
        }
    }
    
    // Get album information from song search
    private static void getAlbumInformation(LibraryModel library, Scanner scanner, String query, String userSearch) {
    	System.out.println("\n===== Album Information =====");
    	System.out.println("1. Get additional album information");
    	System.out.println("2. Back");
    	
    	System.out.print("Enter your choice: ");
    	
    	String choice = scanner.nextLine();
    	
    	// perform operations based on user input
    	switch (choice) {
    		// get album information
    		case "1":
    			if (query.equals("song")) System.out.println(library.getAlbumInformationBySong(userSearch));
    			else System.out.println(library.getAlbumInformationByArtist(userSearch));
    			break;
    		
    		// return to main menu
    		case "2":
    			break;
    		
    		default:
    			System.out.println("Invalid choice.");
    	}
    }

    // Add to Library
    private static void addToLibrary(LibraryModel library, Scanner scanner) {
    	// print library menu options
        System.out.println("\n===== Add to Library =====");
        System.out.println("1. Add a song to the library");
        System.out.println("2. Add an album to the library");
        System.out.println("3. Back");

        System.out.print("Enter your choice: ");

        String choice = scanner.nextLine();
        
        // perform operations based on user input
        switch (choice) {
        	// add song to library
            case "1":
                System.out.print("Enter song title: ");
                String songTitle = scanner.nextLine();
                System.out.print("Enter artist: ");
                String artist = scanner.nextLine();
                System.out.println(library.addSong(songTitle, artist));
                break;
            
            // add album to library
            case "2":
                System.out.print("Enter album title: ");
                String albumTitleInput = scanner.nextLine();
                System.out.print("Enter artist: ");
                String artistInput = scanner.nextLine();
                System.out.println(library.addAlbum(albumTitleInput, artistInput));
                break;
                
            // return to main menu
            case "3":
            	break;

            default:
                System.out.println("Invalid choice.");
        }
    }
    
    // Remove song/album from Library
    private static void removeFromLibrary(LibraryModel library, Scanner scanner) {
    	// print library menu options
        System.out.println("\n==== Remove from Library ====");
        System.out.println("1. Remove a song to the library");
        System.out.println("2. Remove an album to the library");
        System.out.println("3. Back");
        
        System.out.print("Enter your choice: ");

        String choice = scanner.nextLine();
        
        // perform operations based on user input
        switch (choice) {
        	// remove song to library
            case "1":
                System.out.print("Enter song title: ");
                String songTitle = scanner.nextLine();
                System.out.print("Enter artist: ");
                String artist = scanner.nextLine();
                System.out.println(library.removeSong(songTitle, artist));
                break;
            
            // remove album to library
            case "2":
                System.out.print("Enter album title: ");
                String albumTitleInput = scanner.nextLine();
                System.out.print("Enter artist: ");
                String artistInput = scanner.nextLine();
                System.out.println(library.removeAlbum(albumTitleInput, artistInput));
                break;
                
            // return to main menu
            case "3":
            	break;

            default:
                System.out.println("Invalid choice.");
        }
    }

    // Get Lists from Library
    private static void getListsFromLibrary(LibraryModel library, Scanner scanner) {
    	// print listing menu options
        System.out.println("\n===== Library Lists =====");
        System.out.println("1. List of song titles");
        System.out.println("2. Shuffle song titles");
        System.out.println("3. List of artists");
        System.out.println("4. List of albums");
        System.out.println("5. List of playlists");
        System.out.println("6. List of favorite songs");
        System.out.println("7. Back");

        System.out.print("Enter your choice: ");

        String choice = scanner.nextLine();

        switch (choice) {
        	// list songs in library
            case "1":
                System.out.println(library.getSongs());
                break;
            // list artists in library
            case "2":
                System.out.println(library.shuffleSongs());
                break;
            case "3":
                System.out.println(library.getArtists());
                break;
            // list albums in library
            case "4":
                System.out.println(library.getAlbums());
                break;
            // list playlists in library
            case "5":
                System.out.println(library.getPlayLists());
                break;
            // list favorite songs in library
            case "6":
                System.out.println(library.getFavorites());
                break;
            // return to main menu
            case "7":
            	break;
            default:
                System.out.println("Invalid choice.");
        }
    }

    // Manage Playlists 
    private static void managePlaylists(LibraryModel library, Scanner scanner) {
    	// print manage playlists options
        System.out.println("\n===== Manage Playlists =====");
        System.out.println("1. Create a new playlist");
        System.out.println("2. Add a song to a playlist");
        System.out.println("3. Remove a song from a playlist");
        System.out.println("4. Shuffle a playlist");
        System.out.println("5. Back");
        System.out.print("Enter your choice: ");

        String choice = scanner.nextLine();

        switch (choice) {
        	// create new playlist
            case "1":
                System.out.print("Enter playlist name: ");
                String playlistName = scanner.nextLine();
                System.out.println(library.addPlayList(playlistName));
                break;
            // add song to playlist
            case "2":
                System.out.print("Enter playlist name: ");
                String addPlaylistName = scanner.nextLine();
                System.out.print("Enter song title: ");
                String songTitle = scanner.nextLine();
                System.out.print("Enter artist: ");
                String artist = scanner.nextLine();
                System.out.println(library.addSongToPlayList(addPlaylistName, 
                		songTitle, artist));
                break;
            // remove song from playlist
            case "3":
                System.out.print("Enter playlist name: ");
                String removePlaylistName = scanner.nextLine();
                System.out.print("Enter song title: ");
                String removeSongTitle = scanner.nextLine();
                System.out.print("Enter artist: ");
                String removeArtist = scanner.nextLine();
                library.removeSongFromPlayList(removePlaylistName, removeSongTitle, removeArtist);
                System.out.println("Song removed from playlist: " + removePlaylistName);
                System.out.println(library.removeSongFromPlayList(removePlaylistName, 
                		removeSongTitle, removeArtist));
                break;
            // return to main menu
            case "4":
            	System.out.print("Enter playlist name: ");
                String playlist = scanner.nextLine();
                System.out.println(library.shufflePlaylist(playlist));
            	break;
            case "5":
            	break;
            default:
                System.out.println("Invalid choice.");
        }
    }

    // Mark a Song as Favorite
    private static void markFavorite(LibraryModel library, Scanner scanner) {
    	// print prompt to favorite song
        System.out.print("Enter song title: ");
        String title = scanner.nextLine();
        System.out.print("Enter artist: ");
        String artist = scanner.nextLine();
        System.out.println(library.favorite(title, artist));
    }

    // Rate a Song
    private static void rateSong(LibraryModel library, Scanner scanner) {
    	// print prompt to rate a song
        System.out.println("Enter song title: ");
        String title = scanner.nextLine();
        System.out.println("Enter artist: ");
        String artist = scanner.nextLine();
        Integer rating = null;
        // validate user input
        while (rating == null) {
            System.out.println("Enter rating (1-5): ");
            try {
                rating = Integer.valueOf(scanner.nextLine());
                if (rating < 1 || rating > 5) {
                    System.out.println("Rating must be between 1 and 5. Try again.");
                    rating = null;  // reset rating to force the loop to repeat
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number between 1 and 5.");
            }
        }
        System.out.println(library.addRating(title, artist, rating));
    }
	
	public static void main(String[] args) throws FileNotFoundException {
		promptUser();
		// after the end of the user input, end the program
		System.exit(0);
	}
}
